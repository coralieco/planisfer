$('#page-result-container').html('<%= j render "results" %>')

var handler = Gmaps.build('Google');

  handler.buildMap({
    provider: {
      scrollwheel: false,
      styles: [
        {"featureType":"administrative","elementType":"labels.text","stylers":[{"color":"#444444"}, {"visibility":"off"}]},
        // {"featureType":"administrative.province","elementType":"labels.text","stylers":[{"color":"#444444"}, {"visibility":"on"}]},
        {"featureType":"landscape","elementType":"all","stylers":[{"color":"#f2f2f2"}]},
        {"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"}]},
        {"featureType":"road","elementType":"all","stylers":[{"saturation":-100},{"lightness":45}]},
        {"featureType":"road.highway","elementType":"all","stylers":[{"visibility":"simplified"}]},
        {"featureType":"road.arterial","elementType":"labels.icon","stylers":[{"visibility":"off"}]},
        {"featureType":"transit","elementType":"all","stylers":[{"visibility":"off"}]},
        {"featureType":"water","elementType":"all","stylers":[{"color":"#46bcec"},{"visibility":"on"}]}
      ]
    },
    internal: { id: 'map' }}, function() {
      markers = handler.addMarkers( <%= raw @initial_markers.to_json %> );
      handler.bounds.extendWith(markers);
      handler.fitMapToBounds();

      for (var i = 0; i < markers.length; i++) {
        var selectedMarker = markers[i];
        //create an options object
        var testTooltipHtml = selectedMarker.serviceObject.title ;
        var tooltipOptions={ marker:selectedMarker, content:testTooltipHtml};
        // create the tooltip
        var tooltip = new Tooltip(tooltipOptions);
      }
    },
  );



$('.result-card').mouseenter('click', function(e) {
  e.preventDefault();
  $('.cardContainer.selected').removeClass('selected');
  $(this).children('.cardContainer').addClass('selected');
  var tripId = $(this).data('trip-id');
  var colours = $(this).data('colours');
  //
  $.ajax({
    type: "GET",
    url: '/trips/' + tripId + '/refresh_map',
    data: {airport_colours: colours},
    dataType: "json",
    success: function(result) {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
        handler.removeMarkers(markers);
      }
      markers = handler.addMarkers(result);
    }
  })

  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
})

$('.result-card').mouseleave('click', function(e) {
  e.preventDefault();
  var tripId = $(this).data('trip-id');
  handler.removeMarkers(markers);
  markers = handler.addMarkers( <%= raw @initial_markers.to_json %> );
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
})

$('.poi-card').mouseenter('click', function(e) {
  e.preventDefault();
  var poiId = $(this).data('poi');
  var regionId = $(this).data('region');
  $.ajax({
    type: "GET",
    url: '/pois/' + poiId + '/highlight_poi',
    data: {region_id: regionId},
    dataType: "json",
    success: function(result) {
      // console.log('test')
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
        handler.removeMarkers(markers);
      }
      markers = handler.addMarkers(result);
    }
  })
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
})

// create a constructor
function Tooltip(options) {
  // Now initialize all properties.
  this.marker_ = options.marker;
  this.content_ = options.content;
  this.map_ = options.marker.serviceObject.map;
  this.cssClass_ = options.cssClass||null;
  // We define a property to hold the content's
  // div. We'll actually create this div
  // upon receipt of the add() method so we'll
  // leave it null for now.
  this.div_ = null;
  //Explicitly call setMap on this overlay
  this.setMap(this.map_);
  var me = this;
  // Show tooltip on mouseover event.
  me.show();
  // Hide tooltip on mouseout event.

}

// Now we extend google.maps.OverlayView()
Tooltip.prototype = new google.maps.OverlayView();
// onAdd is one of the functions that we must implement,
// it will be called when the map is ready for the overlay to be attached.
Tooltip.prototype.onAdd = function() {
  // Create the DIV and set some basic attributes.
  var div = document.createElement('DIV');
  div.style.position = "absolute";
  // Hide tooltip
  // div.style.visibility = "hidden";
  if(this.cssClass_)
  div.className += " "+this.cssClass_;
  //Attach content to the DIV.
  div.innerHTML = this.content_;
  // Set the overlay's div_ property to this DIV
  this.div_ = div;
  // We add an overlay to a map via one of the map's panes.
  // We'll add this overlay to the floatPane pane.
  var panes = this.getPanes();
  panes.floatPane.appendChild(this.div_);
}

// We here implement draw
Tooltip.prototype.draw = function() {
// Position the overlay. We use the position of the marker
// to peg it to the correct position, just northeast of the marker.
// We need to retrieve the projection from this overlay to do this.
var overlayProjection = this.getProjection();
// Retrieve the coordinates of the marker
// in latlngs and convert them to pixels coordinates.
// We'll use these coordinates to place the DIV.
console.log(this.marker_.serviceObject.position)
var ne = overlayProjection.fromLatLngToDivPixel(this.marker_.serviceObject.position);
// Position the DIV.
var div = this.div_;
div.style.left = ne.x + 'px';
div.style.top = ne.y + 'px';
}

Tooltip.prototype.show = function() {
  if (this.div_) {
    this.div_.style.visibility = "visible";
  }
}
